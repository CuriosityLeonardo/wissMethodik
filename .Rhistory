df <- read.csv("kc_house_data.csv")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("ggspatial")
detach("package:rgeos", unload=TRUE)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
# excerpt
sites <- data.frame(longitude = df$long, latitude = df$lat)
# wide view
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
geom_point(data = sites, aes(x = longitude, y = latitude), size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-145.0, 0), ylim = c(0, 90), expand = FALSE)
# zoom in
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
geom_point(data = sites, aes(x = longitude, y = latitude), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-122.8, -121.5), ylim = c(47.1, 47.8), expand = FALSE)
# Coloring
cond <- df$price <= 321950
df_1st <- df[cond,]
sites_1st <- data.frame(longitude = df_1st$long, latitude = df_1st$lat)
cond <- df$price <= 450000 & df$price > 321950
df_2nd <- df[cond,]
sites_2nd <- data.frame(longitude = df_2nd$long, latitude = df_2nd$lat)
cond <- df$price <= 645000 & df$price > 450000
df_3rd <- df[cond,]
sites_3rd <- data.frame(longitude = df_3rd$long, latitude = df_3rd$lat)
cond <- df$price > 645000
df_4th <- df[cond,]
sites_4th <- data.frame(longitude = df_4th$long, latitude = df_4th$lat)
ggplot(data = world) +
geom_sf(fill= "antiquewhite") +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
geom_point(data = sites_1st, aes(x = longitude, y = latitude), size = 1, shape = 23, fill = "green") +
geom_point(data = sites_2nd, aes(x = longitude, y = latitude), size = 1, shape = 23, fill = "green") +
geom_point(data = sites_3rd, aes(x = longitude, y = latitude), size = 1, shape = 23, fill = "blue") +
geom_point(data = sites_4th, aes(x = longitude, y = latitude), size = 1, shape = 23, fill = "blue") +
coord_sf(xlim = c(-122.8, -121.5), ylim = c(47.1, 47.8), expand = FALSE)
# remove all objects from workspace
rm(list = ls())
detach("package:moderndive", unload=TRUE)
# Install package moderndive that includes the dataset "house_prices" before adding the library
library(moderndive)
library(mosaic)
# add variables squaremeter to get a more intuitive understanding of the size
house_prices$sqmt_living <- house_prices$sqft_living*0.092903
house_prices$sqmt_living15 <- house_prices$sqft_living15*0.092903
house_prices$sqmt_lot <- house_prices$sqft_lot*0.092903
house_prices$sqmt_lot15 <- house_prices$sqft_lot15*0.092903
house_prices$sqmt_above <- house_prices$sqft_above*0.092903
house_prices$sqmt_basement <- house_prices$sqft_basement*0.092903
# attach the data to address the data in an easier way
attach(house_prices)
# Get a sample of records to look at
head(house_prices,10)
help(house_prices)
count(house_prices)
# Get an overview of the distribution of house prices
mean(price) # arithmetisches Mittel
median(price) # Median
max(price)
min(price)
t <- table(price) # Häufigkeitstabelle
t[which.max(t)] # Modus
summary(price)
# Eine Übersicht der Verteilung der Hauspreise über die Dichtefunktion gewinnen
plot(price)
# Eine Übersicht der Verteilung der Hauspreise über die Dichtefunktion gewinnen
plot(density(price),main="Dichtefunktion: Hauspreise"
# Eine Übersicht der Verteilung der Hauspreise über die Dichtefunktion gewinnen
plot(density(price),main="Dichtefunktion: Hauspreise")
# Eine Übersicht der Verteilung der Hauspreise über die Dichtefunktion gewinnen
plot(density(price), main="Dichtefunktion: Hauspreise")
# Get a sample of records to look at
head(house_prices,10)
t[which.max(t)] # Modus
# looking at the 10 highest and lowest house prices
sort_price <- house_prices[order(price),]
head(sort_price,10)
tail(sort_price,10)
head(sort_price$price,10)
tail(sort_price$price,10)
?abline
abline(a,b)
summary(price)
# Eine Übersicht der Verteilung der Hauspreise über die Dichtefunktion gewinnen
plot(density(price), main="Dichtefunktion: Hauspreise")
# add 1st Quartile
abline(0,0,0,321950)
# add 3rd Quartile
abline(0,0,0,645000)
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000))
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis") # change x axis limit to exclude high outliers from the plot
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,at = 0:2000000,labels=c(0,321950,500000,645000,1000000,1500000))
axis(1,at = 1:6,labels=c(0,321950,500000,645000,1000000,1500000))
axis(1,at = 1:2,labels=c(0,1500000))
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,at = 1:2,labels=c(0,1500000))
#0,321950,500000,645000,1000000,1500000
?axis
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,labels=c(0,1500000))
axis(1,at=c(0,1500000),labels=c(0,1500000))
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000))
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n",labels = scales::comma) # change x axis limit to exclude high outliers from the plot
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n",labels = scales::comma) # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000))
t[which.max(t)] # Modus
t <- table(price) # Häufigkeitstabelle
t[which.max(t)] # Modus
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000))
?abline
?text
text(321950,"1. Quartil")
text(321950,"1. Quartil")
text(321950,0.0000005,"1. Quartil")
text(350000,0.0000005,"1. Quartil")
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000)) # add custom x Axis Values
text(350000,0.0000005,"1. Quartil")
text(380000,0.0000005,"1. Quartil")
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000)) # add custom x Axis Values
text(380000,0.0000005,"1. Quartil")
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000)) # add custom x Axis Values
text(380000,0.0000005,"- 1. Quartil")
text(720000,0.0000005,"- 3. Quartil")
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
?abline
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000)) # add custom x Axis Values
text(380000,0.0000005,"- 1. Quartil")
text(710000,0.0000005,"- 3. Quartil")
# remove all objects from workspace
rm(list = ls())
detach("package:moderndive", unload=TRUE)
# Install package moderndive that includes the dataset "house_prices" before adding the library
library(moderndive)
library(mosaic)
# add variables squaremeter to get a more intuitive understanding of the size
house_prices$sqmt_living <- house_prices$sqft_living*0.092903
house_prices$sqmt_living15 <- house_prices$sqft_living15*0.092903
house_prices$sqmt_lot <- house_prices$sqft_lot*0.092903
house_prices$sqmt_lot15 <- house_prices$sqft_lot15*0.092903
house_prices$sqmt_above <- house_prices$sqft_above*0.092903
house_prices$sqmt_basement <- house_prices$sqft_basement*0.092903
# drop the variables with sqft
house_prices_sqmt <- subset(house_prices, select = -c(house_prices$sqft_living,
house_prices$sqft_living15,
house_prices$sqft_lot,
house_prices$sqft_lot15,
house_prices$sqft_above,
house_prices$sqft_basement))
<<<<<<< HEAD
View(house_prices)
View(house_prices)
last_error()
`rlang::last_error()
=======
# attach the data to address the data in an easier way
attach(house_prices)
View(house_prices)
# remove all objects from workspace
rm(list = ls())
detach("package:moderndive", unload=TRUE)
# Install package moderndive that includes the dataset "house_prices" before adding the library
library(moderndive)
library(mosaic)
# add variables squaremeter to get a more intuitive understanding of the size
house_prices$sqmt_living <- house_prices$sqft_living*0.092903
house_prices$sqmt_living15 <- house_prices$sqft_living15*0.092903
house_prices$sqmt_lot <- house_prices$sqft_lot*0.092903
house_prices$sqmt_lot15 <- house_prices$sqft_lot15*0.092903
house_prices$sqmt_above <- house_prices$sqft_above*0.092903
house_prices$sqmt_basement <- house_prices$sqft_basement*0.092903
# drop the variables with sqft
house_prices_sqmt <- subset(house_prices, select = -c(house_prices$sqft_living,
house_prices$sqft_living15,
house_prices$sqft_lot,
house_prices$sqft_lot15,
house_prices$sqft_above,
house_prices$sqft_basement))
View(house_prices)
# attach the data to address the data in an easier way
attach(house_prices)
View(house_prices)
q
# drop the variables with sqft
house_prices_sqmt <- subset(house_prices, select = -c(sqft_living,
sqft_living15,
sqft_lot,
sqft_lot15,
sqft_above,
sqft_basement))
# attach the data to address the data in an easier way
attach(house_prices)
# Get a sample of records to look at
head(house_prices,10)
View(house_prices_sqmt)
# attach the data to address the data in an easier way
attach(house_prices_sqmt)
# Get a sample of records to look at
head(house_prices_sqmt,10)
help(house_prices)
count(house_prices)
help(house_prices_sqmt)
count(house_prices_sqmt)
# Get an overview of the distribution of house prices
summary(house_prices_sqmt)
# Get an overview of the distribution of house prices
summary(house_prices_sqmt)
t <- table(price) # Häufigkeitstabelle
t[which.max(t)] # Modus
t <- table(price) # Quantity Table
t[which.max(t)] # Modus
<- table(price) # Frequency Table
t
t <- table(price) # Frequency Table
t[which.max(t)] # Modus
summary(price)
# Eine Übersicht der Verteilung der Hauspreise über die Dichtefunktion gewinnen
plot(density(price), main="Dichtefunktion: Hauspreise")
# Eine Übersicht der Verteilung der Hauspreise über die Dichtefunktion gewinnen
plot(density(price), main="Dichtefunktion: Hauspreise")
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
# Dichtefunktion zoom in auf relevanten bereich
plotprice <- function(){
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
?abline
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000)) # add custom x Axis Values
text(380000,0.0000005,"- 1. Quartil")
text(710000,0.0000005,"- 3. Quartil")
}
plotprice()
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",ylab="Dichtewahrscheinlichkeit",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
?abline
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000)) # add custom x Axis Values
text(380000,0.0000005,"- 1. Quartil")
text(710000,0.0000005,"- 3. Quartil")
# Dichtefunktion zoom in auf relevanten bereich
plotprice <- function(){
plot(density(price), main="Dichtefunktion: Hauspreise",xlim=c(0,2000000),xlab="Hauspreis",ylab="Dichtewahrscheinlichkeit",xaxt="n") # change x axis limit to exclude high outliers from the plot
abline(0,0,0,321950) # add 1st Quartile
abline(0,0,0,645000) # add 3rd Quartile
?abline
axis(1,at=c(0,321950,500000,645000,1000000,1500000),labels=c(0,321950,500000,645000,1000000,1500000)) # add custom x Axis Values
text(380000,0.0000005,"- 1. Quartil")
text(710000,0.0000005,"- 3. Quartil")
}
plotprice()
boxplot(house_prices_sqmt$price)
boxplot(house_prices_sqmt$price, outline = FALSE)
par(mfrow=c(1,2))
boxplot(house_prices_sqmt$price)
boxplot(house_prices_sqmt$price, outline = FALSE)
boxplot(house_prices_sqmt$price, outline = FALSE, main ="Verteilung Hauspreise\nohne Ausreißer")
par(mfrow=c(1,2))
boxplot(house_prices_sqmt$price, main ="Verteilung Hauspreise")
boxplot(house_prices_sqmt$price, outline = FALSE, main ="Verteilung Hauspreise\nohne Ausreißer")
# Dichtefunktionen von price, sqmt_living15, sqmt_lot15, sqmt_basement
par(mfrow=c(2,2))
plotprice()
plot(density(sqmt_living15),main="Wohnfläche in QM")
plot(density(sqft_lot15),main="Grundstück in QM",xlim=c(0,50000))
plot(density(sqmt_basement),main="Kellergroesse in QM",xlim=c(0,200))
# wie ist ein Haus in King County aufgeteilt?
# Histogramme mit Anzahl Schlafzimmer, Anzahl Badzimmer, Anzahl Etagen, Keller vorhanden?
par(mfrow=c(2,2))
hist(bedrooms,main="Anzahl Schlafzimmer",xlim=c(0,8),xlab="Schlafzimmer",ylab="Anzahl Häuser",breaks=33,xaxt="n")
axis(1,at=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),labels=c(0,1,2,3,4,5,6,7,8),pos=1) # add custom x Axis Values
hist(bathrooms,main="Anzahl Badezimmer",xlim=c(0,6),xaxt="n",breaks=8,xlab="Badezimmer",ylab="Anzahl Häuser") # breaks at the max(bathrooms) to have 1 bar for each bathroom count
axis(1,at=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5),labels=c(0,1,2,3,4,5,6),pos=1) # add custom x Axis Values
hist(floors,breaks=seq(1,3.5,0.25),xlab="Anzahl Etagen",xaxt="n",ylab="Anzahl Häuser")
axis(1,at=c(1.125,1.375,1.875,2.375,3.875),labels=c(1,1.5,2,2.5,3),pos=1) # add custom x Axis Values
par(mfrow=c(2,2))
hist(bedrooms,main="Anzahl Schlafzimmer",xlim=c(0,8),xlab="Anzahl Schlafzimmer",ylab="Anzahl Häuser",breaks=33,xaxt="n")
axis(1,at=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5),labels=c(0,1,2,3,4,5,6,7,8),pos=1) # add custom x Axis Values
hist(bathrooms,main="Anzahl Badezimmer",xlim=c(0,6),xaxt="n",breaks=8,xlab="Anzahl Badezimmer",ylab="Anzahl Häuser") # breaks at the max(bathrooms) to have 1 bar for each bathroom count
axis(1,at=c(0.5,1.5,2.5,3.5,4.5,5.5,6.5),labels=c(0,1,2,3,4,5,6),pos=1) # add custom x Axis Values
hist(floors,breaks=seq(1,3.5,0.25),main = "Anzahl Etagen", xlab="Anzahl Etagen",xaxt="n",ylab="Anzahl Häuser")
axis(1,at=c(1.125,1.375,1.875,2.375,3.875),labels=c(1,1.5,2,2.5,3),pos=1) # add custom x Axis Values
length(which(floors == 1))
length(which(floors == 1.5))
length(which(floors == 2))
unique(floors)
1910 + 10680
max(floors)
min(floors)
# Wie viele Häuser haben 6 Schlafzimmer?
length(which(bedrooms == 6))
# looking at the 10 highest and lowest house prices
sort_price <- house_prices[order(price),]
head(sort_price$price,10)
tail(sort_price$price,10)
# Get an Overview of the dataset
inspect(house_prices_sqmt)
# Get an Overview of the dataset
inspect(house_prices_sqmt)
write.csv(house_prices_sqmt, "house_prices_sqmt.csv")
write.csv(house_prices, "house_prices.csv")
# View dataset
View(house_prices_sqmt)
>>>>>>> 0c971aa60689cf5f687e2740a177da61d3eaed6a
# remove all objects from workspace
# Source: https://rstudio-pubs-static.s3.amazonaws.com/155304_cc51f448116744069664b35e7762999f.html
rm(list = ls())
detach("package:moderndive", unload=TRUE)
# Install package moderndive that includes the dataset "house_prices" before adding the library
library(moderndive)
library(mosaic)
# add variables squaremeter to get a more intuitive understanding of the size
house_prices$sqmt_living <- house_prices$sqft_living*0.092903
house_prices$sqmt_living15 <- house_prices$sqft_living15*0.092903
house_prices$sqmt_lot <- house_prices$sqft_lot*0.092903
house_prices$sqmt_lot15 <- house_prices$sqft_lot15*0.092903
house_prices$sqmt_above <- house_prices$sqft_above*0.092903
house_prices$sqmt_basement <- house_prices$sqft_basement*0.092903
# drop the variables with sqft
house_prices_sqmt <- subset(house_prices, select = -c(sqft_living,
sqft_living15,
sqft_lot,
sqft_lot15,
sqft_above,
sqft_basement))
# attach the data to address the data in an easier way
attach(house_prices_sqmt)
data(swiss)
regression <- step(lm(data = swiss,price~.),trace=1,steps=2)
regression <- step(lm(data = swiss,Fertility~.),trace=1,steps=2)
summary(regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+bathrooms+sqmt_lot15+condition+view),direction="backward")
summary(backward_regression)
inspect(house_prices_sqmt)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+bathrooms+sqmt_lot15+condition+yr_renovated),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+bathrooms+sqmt_lot15+condition+yr_renovated+zipcode),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+bathrooms+sqmt_lot15+condition+yr_renovated+zipcode+bedrooms),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+bathrooms+sqmt_lot15+condition+yr_renovated+zipcode+bedrooms),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+bathrooms+sqmt_lot15+condition+yr_renovated+bedrooms),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+bathrooms+sqmt_lot15+condition+yr_renovated+bedrooms+zipcode),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+sqmt_lot15),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~sqmt_living15+zipcode),direction="backward")
summary(backward_regression)
backward_regression <- step(lm(data=house_prices_sqmt,price~zipcode),direction="backward")
summary(backward_regression)
# remove all objects from workspace
# Source: https://rstudio-pubs-static.s3.amazonaws.com/155304_cc51f448116744069664b35e7762999f.html
rm(list = ls())
detach("package:moderndive", unload=TRUE)
# Install package moderndive that includes the dataset "house_prices" before adding the library
library(moderndive)
library(mosaic)
# add variables squaremeter to get a more intuitive understanding of the size
house_prices$sqmt_living <- house_prices$sqft_living*0.092903
house_prices$sqmt_living15 <- house_prices$sqft_living15*0.092903
house_prices$sqmt_lot <- house_prices$sqft_lot*0.092903
house_prices$sqmt_lot15 <- house_prices$sqft_lot15*0.092903
house_prices$sqmt_above <- house_prices$sqft_above*0.092903
house_prices$sqmt_basement <- house_prices$sqft_basement*0.092903
# drop the variables with sqft
house_prices_sqmt <- subset(house_prices, select = -c(sqft_living,
sqft_living15,
sqft_lot,
sqft_lot15,
sqft_above,
sqft_basement))
# attach the data to address the data in an easier way
attach(house_prices_sqmt)
inspect(house_prices_sqmt)
lm(data = house_prices_sqmt,price~sqft_living15)
regression1 <- lm(data = house_prices_sqmt,price~sqft_living15)
regression1 <- lm(data = house_prices_sqmt,price~sqmt_living15)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~sqmt_lot15)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~waterfront)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~condition)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~grade)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~zipcode)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~date)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~bedrooms)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~bathrooms)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~floors)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~view)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~yr_built)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~yr_renovated)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~lat)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~long)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~sqmt_living)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~sqmt_lot)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~sqmt_above)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~sqmt_basement)
summary(regression1)
regression1 <- lm(data = house_prices_sqmt,price~long)
summary(regression1)
summary(house_prices_sqmt)
cor(house_prices_sqmt)
cov(house_prices_sqmt)
?cor
cor_matrix <- cor(bfi[c(1:21)],use=house_prices_sqmt)
cor_matrix <- cor(house_prices_sqmt[c(1:21)],use="complete.obs")
cor_matrix <- cor(house_prices_sqmt[1:21])
install.packages("corrplot")
library(corrplot)
cor_matrix <- cor(house_prices_sqmt[1:21])
cor_matrix <- cor(house_prices_sqmt[1:5])
inspect(house_prices_sqmt)
View(house_prices_sqmt)
cor_matrix <- cor(house_prices_sqmt[3:6])
corrplot(cor_matrix)
cor_matrix <- cor(house_prices_sqmt[price,bedrooms,bathrooms])
cor_matrix <- cor(house_prices_sqmt[c(price,bedrooms,bathrooms)])
subset_house_prices_sqmt <- subset(house_prices, select = c(price,
bedrooms,
bathrooms,
floors,
view,
yr_built,
yr_renovated,
lat,
long,
sqmt_living,
sqmt_living15,
sqmt_lot,
sqmt_lot15,
sqmt_above,
sqmt_basement))
cor_matrix <- cor(subset_house_prices_sqmt[1:15])
corrplot(cor_matrix,type="upper")
cor(long,price)
cor(lat,price)
View(tips)
library(mosaic)
View(tips)
?tips
library(reshape2)
View(tips)
